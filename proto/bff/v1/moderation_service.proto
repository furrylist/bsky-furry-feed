syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "bff/v1/types.proto";

package bff.v1;

option go_package = "github.com/strideynet/bsky-furry-feed/proto/bff/v1;bffv1pb";

service ModerationService {
  // Ping is a test RPC that checks that the user is authenticated and then
  // returns an empty response. Ideal for health checking the moderation service.
  rpc Ping(PingRequest) returns (PingResponse) {}

  // TODO: Refactor ProcessApprovalQueue to something more like "ProcessPendingActor"
  rpc ProcessApprovalQueue(ProcessApprovalQueueRequest) returns (ProcessApprovalQueueResponse) {}
  // HoldBackPendingActor ignores a pending actor for review in some time, so we
  // donâ€™t need to reject actors that e.g. have no avatar or bio yet.
  rpc HoldBackPendingActor(HoldBackPendingActorRequest) returns (HoldBackPendingActorResponse) {}

  // ListActors fetches multiple actors from the database. It allows this to be
  // filtered by certain attributes.
  rpc ListActors(ListActorsRequest) returns (ListActorsResponse) {}
  // GetActor fetches a single actor from the database.
  rpc GetActor(GetActorRequest) returns (GetActorResponse) {}
  // BanActor changes an actors status to "banned".
  // Actor can be in any status before they are banned.
  rpc BanActor(BanActorRequest) returns (BanActorResponse) {}
  // UnapproveActor changes an actor from "approved" status to "none" status.
  rpc UnapproveActor(UnapproveActorRequest) returns (UnapproveActorResponse) {}
  // ForceApproveActor changes an actor to "approved" status from "none" or "pending".
  rpc ForceApproveActor(ForceApproveActorRequest) returns (ForceApproveActorResponse) {}
  // CreateActor creates a database entry for an actor who does not currently exist.
  // By default, their status will be set to none.
  rpc CreateActor(CreateActorRequest) returns (CreateActorResponse) {}

  rpc ListAuditEvents(ListAuditEventsRequest) returns (ListAuditEventsResponse) {}
  rpc CreateCommentAuditEvent(CreateCommentAuditEventRequest) returns (CreateCommentAuditEventResponse) {}
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {}
  rpc AssignRoles(AssignRolesRequest) returns (AssignRolesResponse) {}
}

message Post {
  string uri = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp indexed_at = 3;
}

message GetActorRequest {
  string did = 1;
}
message GetActorResponse {
  bff.v1.Actor actor = 1;
}

message ListActorsRequest {
  string cursor = 1;
  int32  limit = 2;
  bff.v1.ActorStatus filter_status = 3;
}
message ListActorsResponse {
  repeated bff.v1.Actor actors = 1;
  string cursor = 2;
}

message PingRequest {}
message PingResponse {}

enum ApprovalQueueAction {
  APPROVAL_QUEUE_ACTION_UNSPECIFIED = 0;
  APPROVAL_QUEUE_ACTION_APPROVE = 1;
  APPROVAL_QUEUE_ACTION_REJECT = 2;
}

message ProcessApprovalQueueRequest {
  string did = 1;
  ApprovalQueueAction action = 2;
  bool is_artist = 3;
  // reason is the reason that the actor was approved or rejected. This is
  // currently optional but will become required for rejections eventually.
  string reason = 4;
}
message ProcessApprovalQueueResponse {}
// ProcessApprovalQueueAuditPayload is the payload for the
// `process_approval_queue` audit event.
message ProcessApprovalQueueAuditPayload {
  ApprovalQueueAction action = 1;
  string reason = 2;
}

message HoldBackPendingActorRequest {
  string did = 1;
  google.protobuf.Duration duration = 2;
}
message HoldBackPendingActorResponse {}
message HoldBackPendingActorAuditPayload {
  google.protobuf.Timestamp held_until = 1;
}

message ListAuditEventsRequest {
  string filter_actor_did = 1;
  string filter_subject_did = 2;
  string filter_subject_record_uri = 3;

  // limit specifies how many audit events to return. If unspecific, this
  // defaults to 100.
  uint32 limit = 4;
  string cursor = 5;
}
message ListAuditEventsResponse {
  repeated AuditEvent audit_events = 1;
  string cursor = 2;
}

message CreateCommentAuditEventRequest {
  string subject_did = 1;
  string subject_record_uri = 2;
  string comment = 3;
}
message CreateCommentAuditEventResponse {
  AuditEvent audit_event = 1;
}
// CommentAuditPayload is the payload for the `comment`audit event. This is
// empty, as the comment is actually held within `AuditEvent`
message CommentAuditPayload {
  string comment = 1;
}

message CreateActorRequest {
  string actor_did = 1;
  string reason = 2;
}
message CreateActorResponse {
  bff.v1.Actor actor = 1;
}
message CreateActorAuditPayload {
  string reason = 1;
}

message UnapproveActorRequest {
  string actor_did = 1;
  string reason = 2;
}
message UnapproveActorResponse {
  bff.v1.Actor actor = 1;
}
message UnapproveActorAuditPayload {
  string reason = 1;
}

message ForceApproveActorRequest {
  string actor_did = 1;
  string reason = 2;
}
message ForceApproveActorResponse {
  bff.v1.Actor actor = 1;
}
message ForceApproveActorAuditPayload {
  string reason = 1;
}

message BanActorRequest {
  string actor_did = 1;
  string reason = 2;
}
message BanActorResponse {
  bff.v1.Actor actor = 1;
}
message BanActorAuditPayload {
  string reason = 1;
}

message AuditEvent {
  // id is a unique identifier of this audit event.
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  // actor_did is the DID of the actor whose action caused this audit event
  // to be emitted.
  string actor_did = 3;
  // subject_did is the DID of the actor who the action was done to.
  string subject_did = 4;
  // subject_record_uri is the optional AT URI of a specific ATProto record
  // that the action was taken against.
  string subject_record_uri = 5;

  google.protobuf.Any payload = 6;
}

message ListRolesRequest {}
message ListRolesResponse {
  map<string, Role> roles = 1;
}

message Role {
  repeated string permissions = 1;
}

message AssignRolesRequest {
  string actor_did = 1;
  repeated string roles = 2;
}
message AssignRolesResponse {
}
message AssignRolesAuditPayload {
  repeated string roles_before = 1;
  repeated string roles_after = 2;
}