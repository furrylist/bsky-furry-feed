syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

package bff.v1;

option go_package = "github.com/strideynet/bsky-furry-feed/proto/bff/v1;bffv1pb";

service ModerationService {
  rpc Ping(PingRequest) returns (PingResponse) {}

  rpc GetApprovalQueue(GetApprovalQueueRequest) returns (GetApprovalQueueResponse) {}
  // TODO: Refactor ProcessApprovalQueue to something more like "ApproveActor"
  rpc ProcessApprovalQueue(ProcessApprovalQueueRequest) returns (ProcessApprovalQueueResponse) {}

  rpc ListActors(ListActorsRequest) returns (ListActorsResponse) {}
  rpc GetActor(GetActorRequest) returns (GetActorResponse) {}

  rpc ListAuditEvents(ListAuditEventsRequest) returns (ListAuditEventsResponse) {}
  rpc CreateCommentAuditEvent(CreateCommentAuditEventRequest) returns (CreateCommentAuditEventResponse) {}
}

enum ActorStatus {
  ACTOR_STATUS_UNSPECIFIED = 0;
  ACTOR_STATUS_PENDING = 1;
  ACTOR_STATUS_APPROVED = 2;
  ACTOR_STATUS_BANNED = 3;
  ACTOR_STATUS_NONE = 4;
}

message Actor {
  // did is the decentralized identity of the actor. This is also the UID used
  // for fetching and mutating actors.
  string did = 1;
  // is_hidden is a deprecated flag that used to hide accounts. This no longer
  // has any effect.
  // Deprecated: Use status.
  bool is_hidden = 2;
  // is_artist is a flag indicating this account is primarily an artist. It
  // does not currently control any feed placement.
  bool is_artist = 3;
  // comment is a short string that is applied to an account when it is added
  // to the system. This will eventually be replaced by a more powerful system.
  string comment = 4;
  // status indicates the actor's current status.
  ActorStatus status = 5;
  // created_at indicates the time that the actor was first added to the bff
  // system - this does not necessarily indicate when they joined bluesky.
  google.protobuf.Timestamp created_at = 6;
}

message Post {
  string uri = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp indexed_at = 3;
}

message GetActorRequest {
  string did = 1;
}

message GetActorResponse {
  Actor actor = 1;
}

message ListActorsRequest {
  string cursor = 1;
  int32  limit = 2;
  ActorStatus filter_status = 3;
}

message ListActorsResponse {
  repeated Actor actors = 1;
  string cursor = 2;
}

message PingRequest {}

message PingResponse {}

message GetApprovalQueueRequest {}

message GetApprovalQueueResponse {
  // queue_entry is the actor that needs to be processed by a mod. process the
  // queue entry using the ProcessApprovalQueue RPC.
  Actor queue_entry = 1;
  // queue_entries_remaining indicates how many queue entries are left including
  // the one returned in this response.
  int32 queue_entries_remaining = 2;
}

enum ApprovalQueueAction {
  APPROVAL_QUEUE_ACTION_UNSPECIFIED = 0;
  APPROVAL_QUEUE_ACTION_APPROVE = 1;
  APPROVAL_QUEUE_ACTION_REJECT = 2;
}

message ProcessApprovalQueueRequest {
  string did = 1;
  ApprovalQueueAction action = 2;
  bool is_artist = 3;
}

message ProcessApprovalQueueResponse {}

message ListAuditEventsRequest {
  string actor_did = 1;
  string subject_did = 2;
  string subject_record_uri = 3;
}

message ListAuditEventsResponse {
  repeated AuditEvent audit_events = 1;
}

message CreateCommentAuditEventRequest {
  string subject_did = 1;
  string subject_record_uri = 2;
  string comment = 3;
}

message CreateCommentAuditEventResponse {
  AuditEvent audit_event = 1;
}

message AuditEvent {
  // id is a unique identifier of this audit event.
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  // actor_did is the DID of the actor whose action caused this audit event
  // to be emitted.
  string actor_did = 3;
  // subject_did is the DID of the actor who the action was done to.
  string subject_did = 4;
  // subject_record_uri is the optional AT URI of a specific ATProto record
  // that the action was taken against.
  string subject_record_uri = 5;

  google.protobuf.Any payload = 6;
}

// CommentAuditPayload is the payload for the `comment`audit event. This is
// empty, as the comment is actually held within `AuditEvent`
message CommentAuditPayload {
  string comment = 1;
}

// ProcessApprovalQueueAuditPayload is the payload for the
// `process_approval_queue` audit event.
message ProcessApprovalQueueAuditPayload {
  ApprovalQueueAction action = 1;
}
