// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: candidate_actors.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCandidateActor = `-- name: CreateCandidateActor :one
INSERT INTO
    candidate_actors (did, created_at, is_artist, comment, status)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING did, created_at, is_artist, comment, is_nsfw, is_hidden, status, current_profile_cid
`

type CreateCandidateActorParams struct {
	DID       string
	CreatedAt pgtype.Timestamptz
	IsArtist  bool
	Comment   string
	Status    ActorStatus
}

func (q *Queries) CreateCandidateActor(ctx context.Context, db DBTX, arg CreateCandidateActorParams) (CandidateActor, error) {
	row := db.QueryRow(ctx, createCandidateActor,
		arg.DID,
		arg.CreatedAt,
		arg.IsArtist,
		arg.Comment,
		arg.Status,
	)
	var i CandidateActor
	err := row.Scan(
		&i.DID,
		&i.CreatedAt,
		&i.IsArtist,
		&i.Comment,
		&i.IsNSFW,
		&i.IsHidden,
		&i.Status,
		&i.CurrentProfileCid,
	)
	return i, err
}

const getCandidateActorByDID = `-- name: GetCandidateActorByDID :one
SELECT did, created_at, is_artist, comment, is_nsfw, is_hidden, status, current_profile_cid
FROM
    candidate_actors
WHERE
    did = $1
`

func (q *Queries) GetCandidateActorByDID(ctx context.Context, db DBTX, did string) (CandidateActor, error) {
	row := db.QueryRow(ctx, getCandidateActorByDID, did)
	var i CandidateActor
	err := row.Scan(
		&i.DID,
		&i.CreatedAt,
		&i.IsArtist,
		&i.Comment,
		&i.IsNSFW,
		&i.IsHidden,
		&i.Status,
		&i.CurrentProfileCid,
	)
	return i, err
}

const listCandidateActors = `-- name: ListCandidateActors :many
SELECT did, created_at, is_artist, comment, is_nsfw, is_hidden, status, current_profile_cid
FROM
    candidate_actors ca
WHERE
    ($1::actor_status IS NULL OR
     ca.status = $1)
ORDER BY
    did
`

func (q *Queries) ListCandidateActors(ctx context.Context, db DBTX, status NullActorStatus) ([]CandidateActor, error) {
	rows, err := db.Query(ctx, listCandidateActors, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidateActor
	for rows.Next() {
		var i CandidateActor
		if err := rows.Scan(
			&i.DID,
			&i.CreatedAt,
			&i.IsArtist,
			&i.Comment,
			&i.IsNSFW,
			&i.IsHidden,
			&i.Status,
			&i.CurrentProfileCid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActorProfile = `-- name: UpdateActorProfile :exec
WITH ap as (
    INSERT INTO actor_profiles
        (cid, created_at, display_name, description)
    VALUES
        ($2, $3, $4, $5)
    RETURNING cid
)
UPDATE candidate_actors ca
SET current_profile_cid = (SELECT cid FROM ap)
WHERE
    did = $1
`

type UpdateActorProfileParams struct {
	DID         string
	CID         []byte
	UpdatedAt   pgtype.Timestamptz
	DisplayName pgtype.Text
	Description pgtype.Text
}

func (q *Queries) UpdateActorProfile(ctx context.Context, db DBTX, arg UpdateActorProfileParams) error {
	_, err := db.Exec(ctx, updateActorProfile,
		arg.DID,
		arg.CID,
		arg.UpdatedAt,
		arg.DisplayName,
		arg.Description,
	)
	return err
}

const updateCandidateActor = `-- name: UpdateCandidateActor :one
UPDATE candidate_actors ca
SET
    status=COALESCE($1, ca.status),
    is_artist=COALESCE($2, ca.is_artist),
    comment=COALESCE($3, ca.comment)
WHERE
    did = $4
RETURNING did, created_at, is_artist, comment, is_nsfw, is_hidden, status, current_profile_cid
`

type UpdateCandidateActorParams struct {
	Status   NullActorStatus
	IsArtist pgtype.Bool
	Comment  pgtype.Text
	DID      string
}

func (q *Queries) UpdateCandidateActor(ctx context.Context, db DBTX, arg UpdateCandidateActorParams) (CandidateActor, error) {
	row := db.QueryRow(ctx, updateCandidateActor,
		arg.Status,
		arg.IsArtist,
		arg.Comment,
		arg.DID,
	)
	var i CandidateActor
	err := row.Scan(
		&i.DID,
		&i.CreatedAt,
		&i.IsArtist,
		&i.Comment,
		&i.IsNSFW,
		&i.IsHidden,
		&i.Status,
		&i.CurrentProfileCid,
	)
	return i, err
}
