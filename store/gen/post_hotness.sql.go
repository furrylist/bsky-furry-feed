// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: post_hotness.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteOldPostHotness = `-- name: DeleteOldPostHotness :execrows
DELETE FROM post_hotness
WHERE generated_at < NOW() - $1::INTERVAL
`

func (q *Queries) DeleteOldPostHotness(ctx context.Context, retentionPeriod pgtype.Interval) (int64, error) {
	result, err := q.db.Exec(ctx, deleteOldPostHotness, retentionPeriod)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const materializeClassicPostHotness = `-- name: MaterializeClassicPostHotness :one
WITH seq AS (SELECT NEXTVAL('post_hotness_generation_seq') AS seq)

INSERT INTO post_hotness (uri, alg, score, generation_seq)
SELECT
    cp.uri AS uri,
    'classic' AS alg,
    (
        SELECT COUNT(*)
        FROM candidate_likes AS cl
        WHERE cl.subject_uri = cp.uri AND cl.deleted_at IS NULL
    )
    / (EXTRACT(EPOCH FROM NOW() - cp.created_at) / (60 * 60) + 2)
    ^ 1.85 AS score,
    (SELECT seq FROM seq) AS generation_seq
FROM candidate_posts AS cp
WHERE
    cp.deleted_at IS NULL
    AND cp.created_at >= NOW() - $1::INTERVAL
RETURNING (SELECT seq FROM seq)
`

func (q *Queries) MaterializeClassicPostHotness(ctx context.Context, lookbackPeriod pgtype.Interval) (int64, error) {
	row := q.db.QueryRow(ctx, materializeClassicPostHotness, lookbackPeriod)
	var seq int64
	err := row.Scan(&seq)
	return seq, err
}
