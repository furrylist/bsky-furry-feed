// @generated by protoc-gen-connect-web v0.11.0 with parameter "target=js+dts"
// @generated from file bff/v1/moderation_service.proto (package bff.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BanActorRequest, BanActorResponse, CreateActorRequest, CreateActorResponse, CreateCommentAuditEventRequest, CreateCommentAuditEventResponse, ForceApproveActorRequest, ForceApproveActorResponse, GetActorRequest, GetActorResponse, HoldBackPendingActorRequest, HoldBackPendingActorResponse, ListActorsRequest, ListActorsResponse, ListAuditEventsRequest, ListAuditEventsResponse, ListRolesRequest, ListRolesResponse, PingRequest, PingResponse, ProcessApprovalQueueRequest, ProcessApprovalQueueResponse, UnapproveActorRequest, UnapproveActorResponse } from "./moderation_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service bff.v1.ModerationService
 */
export const ModerationService = {
  typeName: "bff.v1.ModerationService",
  methods: {
    /**
     * Ping is a test RPC that checks that the user is authenticated and then
     * returns an empty response. Ideal for health checking the moderation service.
     *
     * @generated from rpc bff.v1.ModerationService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TODO: Refactor ProcessApprovalQueue to something more like "ProcessPendingActor"
     *
     * @generated from rpc bff.v1.ModerationService.ProcessApprovalQueue
     */
    processApprovalQueue: {
      name: "ProcessApprovalQueue",
      I: ProcessApprovalQueueRequest,
      O: ProcessApprovalQueueResponse,
      kind: MethodKind.Unary,
    },
    /**
     * HoldBackPendingActor ignores a pending actor for review in some time, so we
     * donâ€™t need to reject actors that e.g. have no avatar or bio yet.
     *
     * @generated from rpc bff.v1.ModerationService.HoldBackPendingActor
     */
    holdBackPendingActor: {
      name: "HoldBackPendingActor",
      I: HoldBackPendingActorRequest,
      O: HoldBackPendingActorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListActors fetches multiple actors from the database. It allows this to be
     * filtered by certain attributes.
     *
     * @generated from rpc bff.v1.ModerationService.ListActors
     */
    listActors: {
      name: "ListActors",
      I: ListActorsRequest,
      O: ListActorsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetActor fetches a single actor from the database.
     *
     * @generated from rpc bff.v1.ModerationService.GetActor
     */
    getActor: {
      name: "GetActor",
      I: GetActorRequest,
      O: GetActorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * BanActor changes an actors status to "banned".
     * Actor can be in any status before they are banned.
     *
     * @generated from rpc bff.v1.ModerationService.BanActor
     */
    banActor: {
      name: "BanActor",
      I: BanActorRequest,
      O: BanActorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UnapproveActor changes an actor from "approved" status to "none" status.
     *
     * @generated from rpc bff.v1.ModerationService.UnapproveActor
     */
    unapproveActor: {
      name: "UnapproveActor",
      I: UnapproveActorRequest,
      O: UnapproveActorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ForceApproveActor changes an actor to "approved" status from "none" or "pending".
     *
     * @generated from rpc bff.v1.ModerationService.ForceApproveActor
     */
    forceApproveActor: {
      name: "ForceApproveActor",
      I: ForceApproveActorRequest,
      O: ForceApproveActorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateActor creates a database entry for an actor who does not currently exist.
     * By default, their status will be set to none.
     *
     * @generated from rpc bff.v1.ModerationService.CreateActor
     */
    createActor: {
      name: "CreateActor",
      I: CreateActorRequest,
      O: CreateActorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc bff.v1.ModerationService.ListAuditEvents
     */
    listAuditEvents: {
      name: "ListAuditEvents",
      I: ListAuditEventsRequest,
      O: ListAuditEventsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc bff.v1.ModerationService.CreateCommentAuditEvent
     */
    createCommentAuditEvent: {
      name: "CreateCommentAuditEvent",
      I: CreateCommentAuditEventRequest,
      O: CreateCommentAuditEventResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc bff.v1.ModerationService.ListRoles
     */
    listRoles: {
      name: "ListRoles",
      I: ListRolesRequest,
      O: ListRolesResponse,
      kind: MethodKind.Unary,
    },
  }
};

