// @generated by protoc-gen-es v1.2.0 with parameter "target=js+dts"
// @generated from file bff/v1/moderation_service.proto (package bff.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum bff.v1.ActorStatus
 */
export declare enum ActorStatus {
  /**
   * @generated from enum value: ACTOR_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTOR_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: ACTOR_STATUS_APPROVED = 2;
   */
  APPROVED = 2,

  /**
   * @generated from enum value: ACTOR_STATUS_BANNED = 3;
   */
  BANNED = 3,

  /**
   * @generated from enum value: ACTOR_STATUS_NONE = 4;
   */
  NONE = 4,
}

/**
 * @generated from enum bff.v1.ApprovalQueueAction
 */
export declare enum ApprovalQueueAction {
  /**
   * @generated from enum value: APPROVAL_QUEUE_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: APPROVAL_QUEUE_ACTION_APPROVE = 1;
   */
  APPROVE = 1,

  /**
   * @generated from enum value: APPROVAL_QUEUE_ACTION_REJECT = 2;
   */
  REJECT = 2,
}

/**
 * @generated from message bff.v1.Actor
 */
export declare class Actor extends Message<Actor> {
  /**
   * did is the decentralized identity of the actor. This is also the UID used
   * for fetching and mutating actors.
   *
   * @generated from field: string did = 1;
   */
  did: string;

  /**
   * is_hidden is a deprecated flag that used to hide accounts. This no longer
   * has any effect.
   * Deprecated: Use status.
   *
   * @generated from field: bool is_hidden = 2;
   */
  isHidden: boolean;

  /**
   * is_artist is a flag indicating this account is primarily an artist. It
   * does not currently control any feed placement.
   *
   * @generated from field: bool is_artist = 3;
   */
  isArtist: boolean;

  /**
   * comment is a short string that is applied to an account when it is added
   * to the system. This will eventually be replaced by a more powerful system.
   *
   * @generated from field: string comment = 4;
   */
  comment: string;

  /**
   * status indicates the actor's current status.
   *
   * @generated from field: bff.v1.ActorStatus status = 5;
   */
  status: ActorStatus;

  /**
   * created_at indicates the time that the actor was first added to the bff
   * system - this does not necessarily indicate when they joined bluesky.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * roles is an array of roles this actor holds in relation to actions on the
   * moderation API.
   *
   * @generated from field: repeated string roles = 7;
   */
  roles: string[];

  constructor(data?: PartialMessage<Actor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.Actor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Actor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Actor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Actor;

  static equals(a: Actor | PlainMessage<Actor> | undefined, b: Actor | PlainMessage<Actor> | undefined): boolean;
}

/**
 * @generated from message bff.v1.Post
 */
export declare class Post extends Message<Post> {
  /**
   * @generated from field: string uri = 1;
   */
  uri: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp indexed_at = 3;
   */
  indexedAt?: Timestamp;

  constructor(data?: PartialMessage<Post>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.Post";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Post;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Post;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Post;

  static equals(a: Post | PlainMessage<Post> | undefined, b: Post | PlainMessage<Post> | undefined): boolean;
}

/**
 * @generated from message bff.v1.GetActorRequest
 */
export declare class GetActorRequest extends Message<GetActorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did: string;

  constructor(data?: PartialMessage<GetActorRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.GetActorRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorRequest;

  static equals(a: GetActorRequest | PlainMessage<GetActorRequest> | undefined, b: GetActorRequest | PlainMessage<GetActorRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.GetActorResponse
 */
export declare class GetActorResponse extends Message<GetActorResponse> {
  /**
   * @generated from field: bff.v1.Actor actor = 1;
   */
  actor?: Actor;

  constructor(data?: PartialMessage<GetActorResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.GetActorResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorResponse;

  static equals(a: GetActorResponse | PlainMessage<GetActorResponse> | undefined, b: GetActorResponse | PlainMessage<GetActorResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ListActorsRequest
 */
export declare class ListActorsRequest extends Message<ListActorsRequest> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor: string;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit: number;

  /**
   * @generated from field: bff.v1.ActorStatus filter_status = 3;
   */
  filterStatus: ActorStatus;

  constructor(data?: PartialMessage<ListActorsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ListActorsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListActorsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListActorsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListActorsRequest;

  static equals(a: ListActorsRequest | PlainMessage<ListActorsRequest> | undefined, b: ListActorsRequest | PlainMessage<ListActorsRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ListActorsResponse
 */
export declare class ListActorsResponse extends Message<ListActorsResponse> {
  /**
   * @generated from field: repeated bff.v1.Actor actors = 1;
   */
  actors: Actor[];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor: string;

  constructor(data?: PartialMessage<ListActorsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ListActorsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListActorsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListActorsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListActorsResponse;

  static equals(a: ListActorsResponse | PlainMessage<ListActorsResponse> | undefined, b: ListActorsResponse | PlainMessage<ListActorsResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.PingRequest
 */
export declare class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.PingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest;

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.PingResponse
 */
export declare class PingResponse extends Message<PingResponse> {
  constructor(data?: PartialMessage<PingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.PingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse;

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ProcessApprovalQueueRequest
 */
export declare class ProcessApprovalQueueRequest extends Message<ProcessApprovalQueueRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did: string;

  /**
   * @generated from field: bff.v1.ApprovalQueueAction action = 2;
   */
  action: ApprovalQueueAction;

  /**
   * @generated from field: bool is_artist = 3;
   */
  isArtist: boolean;

  /**
   * reason is the reason that the actor was approved or rejected. This is
   * currently optional but will become required for rejections eventually.
   *
   * @generated from field: string reason = 4;
   */
  reason: string;

  constructor(data?: PartialMessage<ProcessApprovalQueueRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ProcessApprovalQueueRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessApprovalQueueRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessApprovalQueueRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessApprovalQueueRequest;

  static equals(a: ProcessApprovalQueueRequest | PlainMessage<ProcessApprovalQueueRequest> | undefined, b: ProcessApprovalQueueRequest | PlainMessage<ProcessApprovalQueueRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ProcessApprovalQueueResponse
 */
export declare class ProcessApprovalQueueResponse extends Message<ProcessApprovalQueueResponse> {
  constructor(data?: PartialMessage<ProcessApprovalQueueResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ProcessApprovalQueueResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessApprovalQueueResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessApprovalQueueResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessApprovalQueueResponse;

  static equals(a: ProcessApprovalQueueResponse | PlainMessage<ProcessApprovalQueueResponse> | undefined, b: ProcessApprovalQueueResponse | PlainMessage<ProcessApprovalQueueResponse> | undefined): boolean;
}

/**
 * ProcessApprovalQueueAuditPayload is the payload for the
 * `process_approval_queue` audit event.
 *
 * @generated from message bff.v1.ProcessApprovalQueueAuditPayload
 */
export declare class ProcessApprovalQueueAuditPayload extends Message<ProcessApprovalQueueAuditPayload> {
  /**
   * @generated from field: bff.v1.ApprovalQueueAction action = 1;
   */
  action: ApprovalQueueAction;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  constructor(data?: PartialMessage<ProcessApprovalQueueAuditPayload>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ProcessApprovalQueueAuditPayload";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessApprovalQueueAuditPayload;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessApprovalQueueAuditPayload;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessApprovalQueueAuditPayload;

  static equals(a: ProcessApprovalQueueAuditPayload | PlainMessage<ProcessApprovalQueueAuditPayload> | undefined, b: ProcessApprovalQueueAuditPayload | PlainMessage<ProcessApprovalQueueAuditPayload> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ListAuditEventsRequest
 */
export declare class ListAuditEventsRequest extends Message<ListAuditEventsRequest> {
  /**
   * @generated from field: string filter_actor_did = 1;
   */
  filterActorDid: string;

  /**
   * @generated from field: string filter_subject_did = 2;
   */
  filterSubjectDid: string;

  /**
   * @generated from field: string filter_subject_record_uri = 3;
   */
  filterSubjectRecordUri: string;

  /**
   * limit specifies how many audit events to return. If unspecific, this
   * defaults to 100.
   *
   * @generated from field: uint32 limit = 4;
   */
  limit: number;

  /**
   * @generated from field: string cursor = 5;
   */
  cursor: string;

  constructor(data?: PartialMessage<ListAuditEventsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ListAuditEventsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuditEventsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuditEventsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuditEventsRequest;

  static equals(a: ListAuditEventsRequest | PlainMessage<ListAuditEventsRequest> | undefined, b: ListAuditEventsRequest | PlainMessage<ListAuditEventsRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ListAuditEventsResponse
 */
export declare class ListAuditEventsResponse extends Message<ListAuditEventsResponse> {
  /**
   * @generated from field: repeated bff.v1.AuditEvent audit_events = 1;
   */
  auditEvents: AuditEvent[];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor: string;

  constructor(data?: PartialMessage<ListAuditEventsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ListAuditEventsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuditEventsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuditEventsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuditEventsResponse;

  static equals(a: ListAuditEventsResponse | PlainMessage<ListAuditEventsResponse> | undefined, b: ListAuditEventsResponse | PlainMessage<ListAuditEventsResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.CreateCommentAuditEventRequest
 */
export declare class CreateCommentAuditEventRequest extends Message<CreateCommentAuditEventRequest> {
  /**
   * @generated from field: string subject_did = 1;
   */
  subjectDid: string;

  /**
   * @generated from field: string subject_record_uri = 2;
   */
  subjectRecordUri: string;

  /**
   * @generated from field: string comment = 3;
   */
  comment: string;

  constructor(data?: PartialMessage<CreateCommentAuditEventRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.CreateCommentAuditEventRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCommentAuditEventRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCommentAuditEventRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCommentAuditEventRequest;

  static equals(a: CreateCommentAuditEventRequest | PlainMessage<CreateCommentAuditEventRequest> | undefined, b: CreateCommentAuditEventRequest | PlainMessage<CreateCommentAuditEventRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.CreateCommentAuditEventResponse
 */
export declare class CreateCommentAuditEventResponse extends Message<CreateCommentAuditEventResponse> {
  /**
   * @generated from field: bff.v1.AuditEvent audit_event = 1;
   */
  auditEvent?: AuditEvent;

  constructor(data?: PartialMessage<CreateCommentAuditEventResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.CreateCommentAuditEventResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCommentAuditEventResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCommentAuditEventResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCommentAuditEventResponse;

  static equals(a: CreateCommentAuditEventResponse | PlainMessage<CreateCommentAuditEventResponse> | undefined, b: CreateCommentAuditEventResponse | PlainMessage<CreateCommentAuditEventResponse> | undefined): boolean;
}

/**
 * CommentAuditPayload is the payload for the `comment`audit event. This is
 * empty, as the comment is actually held within `AuditEvent`
 *
 * @generated from message bff.v1.CommentAuditPayload
 */
export declare class CommentAuditPayload extends Message<CommentAuditPayload> {
  /**
   * @generated from field: string comment = 1;
   */
  comment: string;

  constructor(data?: PartialMessage<CommentAuditPayload>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.CommentAuditPayload";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommentAuditPayload;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommentAuditPayload;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommentAuditPayload;

  static equals(a: CommentAuditPayload | PlainMessage<CommentAuditPayload> | undefined, b: CommentAuditPayload | PlainMessage<CommentAuditPayload> | undefined): boolean;
}

/**
 * @generated from message bff.v1.CreateActorRequest
 */
export declare class CreateActorRequest extends Message<CreateActorRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid: string;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  constructor(data?: PartialMessage<CreateActorRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.CreateActorRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateActorRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateActorRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateActorRequest;

  static equals(a: CreateActorRequest | PlainMessage<CreateActorRequest> | undefined, b: CreateActorRequest | PlainMessage<CreateActorRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.CreateActorResponse
 */
export declare class CreateActorResponse extends Message<CreateActorResponse> {
  /**
   * @generated from field: bff.v1.Actor actor = 1;
   */
  actor?: Actor;

  constructor(data?: PartialMessage<CreateActorResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.CreateActorResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateActorResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateActorResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateActorResponse;

  static equals(a: CreateActorResponse | PlainMessage<CreateActorResponse> | undefined, b: CreateActorResponse | PlainMessage<CreateActorResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.CreateActorAuditPayload
 */
export declare class CreateActorAuditPayload extends Message<CreateActorAuditPayload> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<CreateActorAuditPayload>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.CreateActorAuditPayload";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateActorAuditPayload;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateActorAuditPayload;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateActorAuditPayload;

  static equals(a: CreateActorAuditPayload | PlainMessage<CreateActorAuditPayload> | undefined, b: CreateActorAuditPayload | PlainMessage<CreateActorAuditPayload> | undefined): boolean;
}

/**
 * @generated from message bff.v1.UnapproveActorRequest
 */
export declare class UnapproveActorRequest extends Message<UnapproveActorRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid: string;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  constructor(data?: PartialMessage<UnapproveActorRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.UnapproveActorRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnapproveActorRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnapproveActorRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnapproveActorRequest;

  static equals(a: UnapproveActorRequest | PlainMessage<UnapproveActorRequest> | undefined, b: UnapproveActorRequest | PlainMessage<UnapproveActorRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.UnapproveActorResponse
 */
export declare class UnapproveActorResponse extends Message<UnapproveActorResponse> {
  /**
   * @generated from field: bff.v1.Actor actor = 1;
   */
  actor?: Actor;

  constructor(data?: PartialMessage<UnapproveActorResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.UnapproveActorResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnapproveActorResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnapproveActorResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnapproveActorResponse;

  static equals(a: UnapproveActorResponse | PlainMessage<UnapproveActorResponse> | undefined, b: UnapproveActorResponse | PlainMessage<UnapproveActorResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.UnapproveActorAuditPayload
 */
export declare class UnapproveActorAuditPayload extends Message<UnapproveActorAuditPayload> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<UnapproveActorAuditPayload>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.UnapproveActorAuditPayload";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnapproveActorAuditPayload;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnapproveActorAuditPayload;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnapproveActorAuditPayload;

  static equals(a: UnapproveActorAuditPayload | PlainMessage<UnapproveActorAuditPayload> | undefined, b: UnapproveActorAuditPayload | PlainMessage<UnapproveActorAuditPayload> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ForceApproveActorRequest
 */
export declare class ForceApproveActorRequest extends Message<ForceApproveActorRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid: string;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  constructor(data?: PartialMessage<ForceApproveActorRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ForceApproveActorRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForceApproveActorRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForceApproveActorRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForceApproveActorRequest;

  static equals(a: ForceApproveActorRequest | PlainMessage<ForceApproveActorRequest> | undefined, b: ForceApproveActorRequest | PlainMessage<ForceApproveActorRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ForceApproveActorResponse
 */
export declare class ForceApproveActorResponse extends Message<ForceApproveActorResponse> {
  /**
   * @generated from field: bff.v1.Actor actor = 1;
   */
  actor?: Actor;

  constructor(data?: PartialMessage<ForceApproveActorResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ForceApproveActorResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForceApproveActorResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForceApproveActorResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForceApproveActorResponse;

  static equals(a: ForceApproveActorResponse | PlainMessage<ForceApproveActorResponse> | undefined, b: ForceApproveActorResponse | PlainMessage<ForceApproveActorResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.ForceApproveActorAuditPayload
 */
export declare class ForceApproveActorAuditPayload extends Message<ForceApproveActorAuditPayload> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<ForceApproveActorAuditPayload>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.ForceApproveActorAuditPayload";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForceApproveActorAuditPayload;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForceApproveActorAuditPayload;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForceApproveActorAuditPayload;

  static equals(a: ForceApproveActorAuditPayload | PlainMessage<ForceApproveActorAuditPayload> | undefined, b: ForceApproveActorAuditPayload | PlainMessage<ForceApproveActorAuditPayload> | undefined): boolean;
}

/**
 * @generated from message bff.v1.BanActorRequest
 */
export declare class BanActorRequest extends Message<BanActorRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid: string;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  constructor(data?: PartialMessage<BanActorRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.BanActorRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BanActorRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BanActorRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BanActorRequest;

  static equals(a: BanActorRequest | PlainMessage<BanActorRequest> | undefined, b: BanActorRequest | PlainMessage<BanActorRequest> | undefined): boolean;
}

/**
 * @generated from message bff.v1.BanActorResponse
 */
export declare class BanActorResponse extends Message<BanActorResponse> {
  /**
   * @generated from field: bff.v1.Actor actor = 1;
   */
  actor?: Actor;

  constructor(data?: PartialMessage<BanActorResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.BanActorResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BanActorResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BanActorResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BanActorResponse;

  static equals(a: BanActorResponse | PlainMessage<BanActorResponse> | undefined, b: BanActorResponse | PlainMessage<BanActorResponse> | undefined): boolean;
}

/**
 * @generated from message bff.v1.BanActorAuditPayload
 */
export declare class BanActorAuditPayload extends Message<BanActorAuditPayload> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<BanActorAuditPayload>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.BanActorAuditPayload";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BanActorAuditPayload;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BanActorAuditPayload;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BanActorAuditPayload;

  static equals(a: BanActorAuditPayload | PlainMessage<BanActorAuditPayload> | undefined, b: BanActorAuditPayload | PlainMessage<BanActorAuditPayload> | undefined): boolean;
}

/**
 * @generated from message bff.v1.AuditEvent
 */
export declare class AuditEvent extends Message<AuditEvent> {
  /**
   * id is a unique identifier of this audit event.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * actor_did is the DID of the actor whose action caused this audit event
   * to be emitted.
   *
   * @generated from field: string actor_did = 3;
   */
  actorDid: string;

  /**
   * subject_did is the DID of the actor who the action was done to.
   *
   * @generated from field: string subject_did = 4;
   */
  subjectDid: string;

  /**
   * subject_record_uri is the optional AT URI of a specific ATProto record
   * that the action was taken against.
   *
   * @generated from field: string subject_record_uri = 5;
   */
  subjectRecordUri: string;

  /**
   * @generated from field: google.protobuf.Any payload = 6;
   */
  payload?: Any;

  constructor(data?: PartialMessage<AuditEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bff.v1.AuditEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEvent;

  static equals(a: AuditEvent | PlainMessage<AuditEvent> | undefined, b: AuditEvent | PlainMessage<AuditEvent> | undefined): boolean;
}

